changes have been made to the upstream programmingassignment2.

> makeVector <- function(x = numeric()) {
+   m <- NULL
+   set <- function(y) {
+     x <<- y
+     m <<- NULL
+   }
+   get <- function() x
+   setmean <- function(mean) m <<- mean
+   getmean <- function() m
+   list(set = set, get = get,
+        setmean = setmean,
+        getmean = getmean)
+ }
> The following function calculates the mean of the special "vector" created with the above function. 
cachemean <- function(x, ...) {
+   m <- x$getmean()
+   if(!is.null(m)) {
+     message("getting cached data")
+     return(m)
+   }
+   data <- x$get()
+   m <- mean(data, ...)
+   x$setmean(m)
+   m
+ }
> makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
+   inv <- NULL
+   set <- function(y) {
+     x <<- y
+     inv <<- NULL
+   }
+   get <- function() x
+   setInverse <- function(inverse) inv <<- inverse
+   getInverse <- function() inv
+   list(set = set,
+        get = get,
+        setInverse = setInverse,
+        getInverse = getInverse)
+ }
> cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
+   ## Return a matrix that is the inverse of 'x'
+   inv <- x$getInverse()
+   if (!is.null(inv)) {
+     message("getting cached data")
+     return(inv)
+   }
+   mat <- x$get()
+   inv <- solve(mat, ...)
+   x$setInverse(inv)
+   inv
+ }
> testing the function
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
> my_matrix$get()
     [,1] [,2]
[1,]    1    3
[2,]    2    4